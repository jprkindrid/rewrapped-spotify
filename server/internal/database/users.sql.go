// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, spotify_id, storage_key)
VALUES (
   ?1 ,datetime('now'), datetime('now'), ?2, ?3
)
RETURNING id, created_at, updated_at, spotify_id, storage_key
`

type CreateUserParams struct {
	ID         string
	SpotifyID  string
	StorageKey string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.SpotifyID, arg.StorageKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SpotifyID,
		&i.StorageKey,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE spotify_id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, spotifyID string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, spotifyID)
	return err
}

const getUserData = `-- name: GetUserData :one
SELECT id, created_at, updated_at, spotify_id, storage_key FROM users
WHERE spotify_id = ?1
`

func (q *Queries) GetUserData(ctx context.Context, spotifyID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserData, spotifyID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SpotifyID,
		&i.StorageKey,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
DELETE FROM users
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET storage_key = ?2, updated_at = datetime('now')
WHERE id = ?1
RETURNING id, created_at, updated_at, spotify_id, storage_key
`

type UpdateUserParams struct {
	ID         string
	StorageKey string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.StorageKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SpotifyID,
		&i.StorageKey,
	)
	return i, err
}
